import { EditorState, Plugin, PluginKey } from "prosemirror-state";
import { EditorView } from "prosemirror-view";
import type { BlockNoteEditor } from "../../editor/BlockNoteEditor";
import type { BlockFromConfig, InlineContentSchema, StyleSchema } from "../../schema";
import { UiElementPosition } from "../../extensions-shared/UiElementPosition";
import { EventEmitter } from "../../util/EventEmitter";
import { DefaultBlockSchema } from "../../blocks/defaultBlocks";
export type ImagePanelState<I extends InlineContentSchema, S extends StyleSchema> = UiElementPosition & {
    block: BlockFromConfig<DefaultBlockSchema["image"], I, S>;
};
export declare class ImagePanelView<I extends InlineContentSchema, S extends StyleSchema> {
    private readonly pluginKey;
    private readonly pmView;
    state?: ImagePanelState<I, S>;
    emitUpdate: () => void;
    prevWasEditable: boolean | null;
    constructor(pluginKey: PluginKey, pmView: EditorView, emitUpdate: (state: ImagePanelState<I, S>) => void);
    mouseDownHandler: () => void;
    dragstartHandler: () => void;
    blurHandler: (event: FocusEvent) => void;
    scrollHandler: () => void;
    update(view: EditorView, prevState: EditorState): void;
    destroy(): void;
}
export declare class ImagePanelProsemirrorPlugin<I extends InlineContentSchema, S extends StyleSchema> extends EventEmitter<any> {
    private view;
    readonly plugin: Plugin;
    constructor(_editor: BlockNoteEditor<{
        image: DefaultBlockSchema["image"];
    }, I, S>);
    onUpdate(callback: (state: ImagePanelState<I, S>) => void): () => void;
}
